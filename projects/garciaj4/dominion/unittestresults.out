TESTING buyCard():
FAILED:Ensure we can only buy if in the appropriate phase:
Expected: -1     Received: 0
SUCCESS:Ensure we cannot buy with no buys left:
SUCCESS:Ensure we cannot buy if there is no supply:
SUCCESS:Ensure we cannot buy if we have insufficient coins:
SUCCESS:Test to make sure coins was decremented correctly:
SUCCESS:Test to make sure numBuys is now 0:
FAILED:Test to make sure the card purchased hand is in the current player's hand:
Expected: 1     Received: 0
___________________________________________

TESTING playcard():
SUCCESS:Test to ensure we cannot perform an action during the buy phase.
SUCCESS:Test to ensure we cannot perform an action if we have none left.
SUCCESS:Test to ensure we cannot play a non-action card.
FAILED:Testing for appropriate gamestate after playing Baron/Discard == True:
Expected: 1     Received: -4
___________________________________________

TESTING supplyCount():
SUCCESS:Test to ensure a supply of the non-included kingdom cards dne.
SUCCESS:Ensure we start with the correct number of kingdom cards
FAILED:Testing detection of garbage supply value
Expected: -1     Received: -50
FAILED:Testing a negative supplyPos
Expected: -1     Received: 2
FAILED:Testing an out-of-bounds supplyPos
Expected: -1     Received: 0
FAILED:Testing an invalid game state argument
Expected: -1     Received: 1418361861
___________________________________________

TESTING updateCoins():
FAILED:Test to make sure the very first player starts with 0 coins
Expected: 0     Received: 4
SUCCESS:Test treausre of each type in a full treasure hand amounting to 9
SUCCESS:Test treausre of each type in a full treasure hand amounting to 9 with a bonus of 5
SUCCESS:Test treausre of each type in a full treasure hand amounting to 9 with a bonus of -5
SUCCESS:Test an empty treasure hand
SUCCESS:Test an empty treasure hand with a 10 bonus
SUCCESS:Test an empty treasure hand with a -10 bonus
FAILED:Test to ensure playing Steward with appropriate choices gives us appropriate treausre
Expected: 2     Received: 0
___________________________________________

TESTING: smithy:
FAILED:Test to see if our actions was reduced by 1
Expected: 0     Received: 1
FAILED:Test to see if our deck count was reduced by 3
Expected: 2     Received: 1
FAILED:Test to see if our hand count was increaed by 2
Expected: 7     Received: 8
SUCCESS:Test to ensure our played card count increased by 1
SUCCESS:Test to ensure smithy is no longer in hand
___________________________________________

TESTING: adventurer:
FAILED:Test to see if our actions was reduced by 1
Expected: 0     Received: 1
FAILED:Test if adventurer was removed from our hand
Expected: 7     Received: 7
FAILED:Test if our played cards icnreased by one
Expected: 1     Received: 0
SUCCESS:Test if our deck was reduced by three cards
FAILED:Test if our hand count increased by one cards
Expected: 6     Received: 7
SUCCESS:Test if the two new cards are the coppers we were expecting
SUCCESS:Test if we discarded an estate card
___________________________________________

TESTING: Council Room:
FAILED:Test to see if our actions was reduced by 1
Expected: 0     Received: 1
SUCCESS:Test council_room is no longer in our hand
SUCCESS:Test our played cards increases by 1
FAILED:Test if our hand size increases by 3
Expected: 8     Received: 9
SUCCESS:Test if our buys increased by 1
FAILED:Test if the other player's hand count increase by one
Expected: 1     Received: 0
FAILED:Test if the other player's deck count decreased by one
Expected: 9     Received: 10
___________________________________________

TESTING: Village:
FAILED:Test if village was removed from the hand
Expected: 14     Received: 14
SUCCESS:Test if our hand size remained the same
FAILED:Test if our actions increased by one
Expected: 2     Received: 3
FAILED:Test if our deck size decreased by one
Expected: 4     Received: 5
SUCCESS:Test if our played cards increased by one
___________________________________________

File 'dominion.c'
Lines executed:36.91% of 569
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:16
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
      720:    8:int compare(const void* a, const void* b) {
      720:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
      720:   11:  if (*(int*)a < *(int*)b)
      192:   12:    return -1;
      528:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
       24:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
       24:   44:  SelectStream(1);
       24:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
       24:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
       24:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      264:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
     2640:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
     2400:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
       24:   73:  if (numPlayers == 2)
        -:   74:    {
       24:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
       24:   87:  if (numPlayers == 2)
        -:   88:    {
       24:   89:      state->supplyCount[estate] = 8;
       24:   90:      state->supplyCount[duchy] = 8;
       24:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
       24:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       24:  102:  state->supplyCount[silver] = 40;
       24:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      504:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
     3960:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
     3720:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
      240:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
       48:  115:		  if (numPlayers == 2){ 
       24:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
      216:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
      240:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     3480:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       72:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
       48:  140:      state->deckCount[i] = 0;
      192:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
      144:  143:	  state->deck[i][j] = estate;
      144:  144:	  state->deckCount[i]++;
        -:  145:	}
      384:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
      336:  148:	  state->deck[i][j] = copper;
      336:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       72:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
       48:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       72:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       48:  166:      state->handCount[i] = 0;
       48:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      672:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
      648:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
       24:  182:  state->outpostPlayed = 0;
       24:  183:  state->phase = 0;
       24:  184:  state->numActions = 1;
       24:  185:  state->numBuys = 1;
       24:  186:  state->playedCardCount = 0;
       24:  187:  state->whoseTurn = 0;
       24:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
      144:  192:  for (it = 0; it < 5; it++){
      120:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
       24:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
       24:  198:  return 0;
        -:  199:}
        -:  200:
       48:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       48:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       48:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
       48:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      576:  214:  while (state->deckCount[player] > 0) {
      480:  215:    card = floor(Random() * state->deckCount[player]);
      480:  216:    newDeck[newDeckPos] = state->deck[player][card];
      480:  217:    newDeckPos++;
     1680:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
     1200:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      480:  221:    state->deckCount[player]--;
        -:  222:  }
      528:  223:  for (i = 0; i < newDeckPos; i++) {
      480:  224:    state->deck[player][i] = newDeck[i];
      480:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       48:  228:  return 0;
        -:  229:}
        -:  230:
       10:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
       10:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
       10:  237:  if (state->phase != 0)
        -:  238:    {
        2:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
        8:  243:  if ( state->numActions < 1 )
        -:  244:    {
        2:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
        6:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
        6:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
        2:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
        4:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
        4:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
        4:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
        4:  269:  return 0;
        -:  270:}
        -:  271:
       10:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
       10:  280:  who = state->whoseTurn;
        -:  281:
       10:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
        2:  285:    return -1;
        8:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
        4:  289:    return -1;
        4:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
        4:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
        4:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
        4:  299:    state->coins = (state->coins) - (getCost(supplyPos));
        4:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
        4:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
        6:  315:int handCard(int handPos, struct gameState *state) {
        6:  316:  int currentPlayer = whoseTurn(state);
        6:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
       42:  320:int supplyCount(int card, struct gameState *state) {
       42:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
       18:  346:int whoseTurn(struct gameState *state) {
       18:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
      144:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
      144:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
      144:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
      144:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
      144:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      144:  576:    state->deckCount[player]--;
      144:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
      144:  580:  return 0;
        -:  581:}
        -:  582:
       14:  583:int getCost(int cardNumber)
        -:  584:{
       14:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
       14:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
        2:  646:int playAdventurer(struct gameState *state){
        2:  647:  int drawntreasure = 0;
        2:  648:  int currentPlayer = whoseTurn(state);
        -:  649:  int cardDrawn;
        2:  650:  int z = 0;
        -:  651:  int temphand[MAX_HAND];
        -:  652:
       10:  653:  while(drawntreasure<2){
        6:  654:    if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  655:      shuffle(currentPlayer, state);
        -:  656:    }
        6:  657:    drawCard(currentPlayer, state);
        6:  658:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        6:  659:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        4:  660:      drawntreasure++;
        -:  661:    else{
        2:  662:      temphand[z]=cardDrawn;
        2:  663:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        2:  664:      z++;
        -:  665:    } 
        -:  666:  }
        8:  667:  while(z>=0){
        4:  668:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        4:  669:    z=z-1;
        -:  670:  }
        2:  671:      return 0;
        -:  672:}
        -:  673:
        2:  674:int playCouncilRoom(struct gameState *state, int handPos){
        -:  675:  int i;
        2:  676:  int currentPlayer = whoseTurn(state);
        -:  677:  //+4 Cards
       10:  678:  for (i = 0; i < 4; i++)
        -:  679:  {
        8:  680:    drawCard(currentPlayer, state);
        -:  681:  }
        -:  682:      
        -:  683:  //+1 Buy
        2:  684:  state->numBuys++;
        -:  685:      
        -:  686:  //Each other player draws a card
        6:  687:  for (i = 0; i < state->numPlayers; i++)
        -:  688:  {
        4:  689:    if ( i == currentPlayer )
        -:  690:    {
        2:  691:      drawCard(i, state);
        -:  692:    }
        -:  693:  }
        -:  694:      
        -:  695:  //put played card in played card pile
        2:  696:  discardCard(handPos, currentPlayer, state, 0);
        -:  697:      
        2:  698:  return 0;
        -:  699:}
        -:  700:
        2:  701:int playSmithy(struct gameState *state, int handPos){
        2:  702:  int currentPlayer = whoseTurn(state);
        -:  703:
        -:  704:  //+3 Cards
        -:  705:  int i;
       10:  706:  for (i = 0; i <= 3; i++)
        -:  707:  {
        8:  708:    drawCard(currentPlayer, state);
        -:  709:  }
        -:  710:      
        -:  711:  //discard card from hand
        2:  712:  discardCard(handPos, currentPlayer, state, 0);
        2:  713:  return 0;
        -:  714:}
        -:  715:
        2:  716:int playVillage(struct gameState *state, int handPos){
        2:  717:  int currentPlayer = whoseTurn(state);
        -:  718:  //+1 Card
        2:  719:  currentPlayer++;
        -:  720:  //drawCard(currentPlayer, state);
        -:  721:
        -:  722:  //+2 Actions
        2:  723:  state->numActions = state->numActions + 2;
        -:  724:
        -:  725:  //discard played card from hand
        2:  726:  discardCard(handPos, currentPlayer, state, 0);
        2:  727:  return 0;
        -:  728:}
        -:  729:
    #####:  730:int playGreatHall(struct gameState *state, int handPos){
    #####:  731:  int currentPlayer = whoseTurn(state);
    #####:  732:  int numActions = state->numActions;
        -:  733:  
        -:  734:  //+1 Card
    #####:  735:  drawCard(currentPlayer, state);
        -:  736:  
        -:  737:  //+1 Actions
    #####:  738:  numActions++;
        -:  739:  
        -:  740:  //discard card from hand
    #####:  741:  discardCard(handPos, currentPlayer, state, 0);
    #####:  742:  return 0;
        -:  743:}
        -:  744:
        4:  745:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  746:{
        -:  747:  int i;
        -:  748:  int j;
        -:  749:  int k;
        -:  750:  int x;
        -:  751:  int index;
        4:  752:  int currentPlayer = whoseTurn(state);
        4:  753:  int nextPlayer = currentPlayer + 1;
        -:  754:
        4:  755:  int tributeRevealedCards[2] = {-1, -1};
        -:  756:  int temphand[MAX_HAND];// moved above the if statement
        4:  757:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  758:    nextPlayer = 0;
        -:  759:  }
        -:  760:  
        -:  761:	
        -:  762:  //uses switch to select card and perform actions
        4:  763:  switch( card ) 
        -:  764:    {
        -:  765:    case adventurer:
    #####:  766:        playAdventurer(state);
    #####:  767:        return 0;
        -:  768:			
        -:  769:    case council_room:
    #####:  770:        playCouncilRoom(state, handPos);
    #####:  771:        return 0;
        -:  772:			
        -:  773:    case feast:
        -:  774:      //gain card with cost up to 5
        -:  775:      //Backup hand
    #####:  776:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  777:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  778:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  779:      }
        -:  780:      //Backup hand
        -:  781:
        -:  782:      //Update Coins for Buy
    #####:  783:      updateCoins(currentPlayer, state, 5);
    #####:  784:      x = 1;//Condition to loop on
    #####:  785:      while( x == 1) {//Buy one card
    #####:  786:	if (supplyCount(choice1, state) <= 0){
        -:  787:	  if (DEBUG)
        -:  788:	    printf("None of that card left, sorry!\n");
        -:  789:
        -:  790:	  if (DEBUG){
        -:  791:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  792:	  }
        -:  793:	}
    #####:  794:	else if (state->coins < getCost(choice1)){
    #####:  795:	  printf("That card is too expensive!\n");
        -:  796:
        -:  797:	  if (DEBUG){
        -:  798:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  799:	  }
        -:  800:	}
        -:  801:	else{
        -:  802:
        -:  803:	  if (DEBUG){
        -:  804:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  805:	  }
        -:  806:
    #####:  807:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  808:	  x = 0;//No more buying cards
        -:  809:
        -:  810:	  if (DEBUG){
        -:  811:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  812:	  }
        -:  813:
        -:  814:	}
        -:  815:      }     
        -:  816:
        -:  817:      //Reset Hand
    #####:  818:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  819:	state->hand[currentPlayer][i] = temphand[i];
    #####:  820:	temphand[i] = -1;
        -:  821:      }
        -:  822:      //Reset Hand
        -:  823:      			
    #####:  824:      return 0;
        -:  825:			
        -:  826:    case gardens:
    #####:  827:      return -1;
        -:  828:			
        -:  829:    case mine:
    #####:  830:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  831:
    #####:  832:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  833:	{
    #####:  834:	  return -1;
        -:  835:	}
        -:  836:		
    #####:  837:      if (choice2 > treasure_map || choice2 < curse)
        -:  838:	{
    #####:  839:	  return -1;
        -:  840:	}
        -:  841:
    #####:  842:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  843:	{
    #####:  844:	  return -1;
        -:  845:	}
        -:  846:
    #####:  847:      gainCard(choice2, state, 2, currentPlayer);
        -:  848:
        -:  849:      //discard card from hand
    #####:  850:      discardCard(handPos, currentPlayer, state, 0);
        -:  851:
        -:  852:      //discard trashed card
    #####:  853:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  854:	{
    #####:  855:	  if (state->hand[currentPlayer][i] == j)
        -:  856:	    {
    #####:  857:	      discardCard(i, currentPlayer, state, 0);			
    #####:  858:	      break;
        -:  859:	    }
        -:  860:	}
        -:  861:			
    #####:  862:      return 0;
        -:  863:			
        -:  864:    case remodel:
    #####:  865:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  866:
    #####:  867:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  868:	{
    #####:  869:	  return -1;
        -:  870:	}
        -:  871:
    #####:  872:      gainCard(choice2, state, 0, currentPlayer);
        -:  873:
        -:  874:      //discard card from hand
    #####:  875:      discardCard(handPos, currentPlayer, state, 0);
        -:  876:
        -:  877:      //discard trashed card
    #####:  878:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  879:	{
    #####:  880:	  if (state->hand[currentPlayer][i] == j)
        -:  881:	    {
    #####:  882:	      discardCard(i, currentPlayer, state, 0);			
    #####:  883:	      break;
        -:  884:	    }
        -:  885:	}
        -:  886:
        -:  887:
    #####:  888:      return 0;
        -:  889:		
        -:  890:    case smithy:
    #####:  891:      playSmithy(state, handPos);
    #####:  892:      return 0;
        -:  893:
        -:  894:		
        -:  895:    case village:
    #####:  896:      playVillage(state, handPos);
    #####:  897:      return 0;
        -:  898:		
        -:  899:    case baron:
        2:  900:      state->numBuys++;//Increase buys by 1!
        2:  901:      if (choice1 > 0){//Boolean true or going to discard an estate
        2:  902:	int p = 0;//Iterator for hand!
        2:  903:	int card_not_discarded = 1;//Flag for discard set!
        6:  904:	while(card_not_discarded){
        2:  905:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
        2:  906:	    state->coins += 4;//Add 4 coins to the amount of coins
        2:  907:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
        2:  908:	    state->discardCount[currentPlayer]++;
       12:  909:	    for (;p < state->handCount[currentPlayer]; p++){
       10:  910:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  911:	    }
        2:  912:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
        2:  913:	    state->handCount[currentPlayer]--;
        2:  914:	    card_not_discarded = 0;//Exit the loop
        -:  915:	  }
    #####:  916:	  else if (p > state->handCount[currentPlayer]){
        -:  917:	    if(DEBUG) {
        -:  918:	      printf("No estate cards in your hand, invalid choice\n");
        -:  919:	      printf("Must gain an estate if there are any\n");
        -:  920:	    }
    #####:  921:	    if (supplyCount(estate, state) > 0){
    #####:  922:	      gainCard(estate, state, 0, currentPlayer);
    #####:  923:	      state->supplyCount[estate]--;//Decrement estates
    #####:  924:	      if (supplyCount(estate, state) == 0){
    #####:  925:		isGameOver(state);
        -:  926:	      }
        -:  927:	    }
    #####:  928:	    card_not_discarded = 0;//Exit the loop
        -:  929:	  }
        -:  930:			    
        -:  931:	  else{
    #####:  932:	    p++;//Next card
        -:  933:	  }
        -:  934:	}
        -:  935:      }
        -:  936:			    
        -:  937:      else{
    #####:  938:	if (supplyCount(estate, state) > 0){
    #####:  939:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  940:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  941:	  if (supplyCount(estate, state) == 0){
    #####:  942:	    isGameOver(state);
        -:  943:	  }
        -:  944:	}
        -:  945:      }
        -:  946:	    
        -:  947:      
        2:  948:      return 0;
        -:  949:		
        -:  950:    case great_hall:
    #####:  951:      playGreatHall(state, handPos);
    #####:  952:      return 0;
        -:  953:		
        -:  954:    case minion:
        -:  955:      //+1 action
    #####:  956:      state->numActions++;
        -:  957:			
        -:  958:      //discard card from hand
    #####:  959:      discardCard(handPos, currentPlayer, state, 0);
        -:  960:			
    #####:  961:      if (choice1)		//+2 coins
        -:  962:	{
    #####:  963:	  state->coins = state->coins + 2;
        -:  964:	}
        -:  965:			
    #####:  966:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  967:	{
        -:  968:	  //discard hand
    #####:  969:	  while(numHandCards(state) > 0)
        -:  970:	    {
    #####:  971:	      discardCard(handPos, currentPlayer, state, 0);
        -:  972:	    }
        -:  973:				
        -:  974:	  //draw 4
    #####:  975:	  for (i = 0; i < 4; i++)
        -:  976:	    {
    #####:  977:	      drawCard(currentPlayer, state);
        -:  978:	    }
        -:  979:				
        -:  980:	  //other players discard hand and redraw if hand size > 4
    #####:  981:	  for (i = 0; i < state->numPlayers; i++)
        -:  982:	    {
    #####:  983:	      if (i != currentPlayer)
        -:  984:		{
    #####:  985:		  if ( state->handCount[i] > 4 )
        -:  986:		    {
        -:  987:		      //discard hand
    #####:  988:		      while( state->handCount[i] > 0 )
        -:  989:			{
    #####:  990:			  discardCard(handPos, i, state, 0);
        -:  991:			}
        -:  992:							
        -:  993:		      //draw 4
    #####:  994:		      for (j = 0; j < 4; j++)
        -:  995:			{
    #####:  996:			  drawCard(i, state);
        -:  997:			}
        -:  998:		    }
        -:  999:		}
        -: 1000:	    }
        -: 1001:				
        -: 1002:	}
    #####: 1003:      return 0;
        -: 1004:		
        -: 1005:    case steward:
        2: 1006:      if (choice1 == 1)
        -: 1007:	{
        -: 1008:	  //+2 cards
    #####: 1009:	  drawCard(currentPlayer, state);
    #####: 1010:	  drawCard(currentPlayer, state);
        -: 1011:	}
        2: 1012:      else if (choice1 == 2)
        -: 1013:	{
        -: 1014:	  //+2 coins
        2: 1015:	  state->coins = state->coins + 2;
        -: 1016:	}
        -: 1017:      else
        -: 1018:	{
        -: 1019:	  //trash 2 cards in hand
    #####: 1020:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1021:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1022:	}
        -: 1023:			
        -: 1024:      //discard card from hand
        2: 1025:      discardCard(handPos, currentPlayer, state, 0);
        2: 1026:      return 0;
        -: 1027:		
        -: 1028:    case tribute:
    #####: 1029:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1030:	if (state->deckCount[nextPlayer] > 0){
    #####: 1031:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1032:	  state->deckCount[nextPlayer]--;
        -: 1033:	}
    #####: 1034:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1035:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1036:	  state->discardCount[nextPlayer]--;
        -: 1037:	}
        -: 1038:	else{
        -: 1039:	  //No Card to Reveal
        -: 1040:	  if (DEBUG){
        -: 1041:	    printf("No cards to reveal\n");
        -: 1042:	  }
        -: 1043:	}
        -: 1044:      }
        -: 1045:	    
        -: 1046:      else{
    #####: 1047:	if (state->deckCount[nextPlayer] == 0){
    #####: 1048:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1049:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1050:	    state->deckCount[nextPlayer]++;
    #####: 1051:	    state->discard[nextPlayer][i] = -1;
    #####: 1052:	    state->discardCount[nextPlayer]--;
        -: 1053:	  }
        -: 1054:			    
    #####: 1055:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1056:	} 
    #####: 1057:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1058:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1059:	state->deckCount[nextPlayer]--;
    #####: 1060:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1061:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1062:	state->deckCount[nextPlayer]--;
        -: 1063:      }    
        -: 1064:		       
    #####: 1065:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1066:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1067:	state->playedCardCount++;
    #####: 1068:	tributeRevealedCards[1] = -1;
        -: 1069:      }
        -: 1070:
    #####: 1071:      for (i = 0; i <= 2; i ++){
    #####: 1072:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1073:	  state->coins += 2;
        -: 1074:	}
        -: 1075:		    
    #####: 1076:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1077:	  drawCard(currentPlayer, state);
    #####: 1078:	  drawCard(currentPlayer, state);
        -: 1079:	}
        -: 1080:	else{//Action Card
    #####: 1081:	  state->numActions = state->numActions + 2;
        -: 1082:	}
        -: 1083:      }
        -: 1084:	    
    #####: 1085:      return 0;
        -: 1086:		
        -: 1087:    case ambassador:
    #####: 1088:      j = 0;		//used to check if player has enough cards to discard
        -: 1089:
    #####: 1090:      if (choice2 > 2 || choice2 < 0)
        -: 1091:	{
    #####: 1092:	  return -1;				
        -: 1093:	}
        -: 1094:
    #####: 1095:      if (choice1 == handPos)
        -: 1096:	{
    #####: 1097:	  return -1;
        -: 1098:	}
        -: 1099:
    #####: 1100:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1101:	{
    #####: 1102:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1103:	    {
    #####: 1104:	      j++;
        -: 1105:	    }
        -: 1106:	}
    #####: 1107:      if (j < choice2)
        -: 1108:	{
    #####: 1109:	  return -1;				
        -: 1110:	}
        -: 1111:
        -: 1112:      if (DEBUG) 
        -: 1113:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1114:
        -: 1115:      //increase supply count for choosen card by amount being discarded
    #####: 1116:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1117:			
        -: 1118:      //each other player gains a copy of revealed card
    #####: 1119:      for (i = 0; i < state->numPlayers; i++)
        -: 1120:	{
    #####: 1121:	  if (i != currentPlayer)
        -: 1122:	    {
    #####: 1123:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1124:	    }
        -: 1125:	}
        -: 1126:
        -: 1127:      //discard played card from hand
    #####: 1128:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1129:
        -: 1130:      //trash copies of cards returned to supply
    #####: 1131:      for (j = 0; j < choice2; j++)
        -: 1132:	{
    #####: 1133:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1134:	    {
    #####: 1135:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1136:		{
    #####: 1137:		  discardCard(i, currentPlayer, state, 1);
    #####: 1138:		  break;
        -: 1139:		}
        -: 1140:	    }
        -: 1141:	}			
        -: 1142:
    #####: 1143:      return 0;
        -: 1144:		
        -: 1145:    case cutpurse:
        -: 1146:
    #####: 1147:      updateCoins(currentPlayer, state, 2);
    #####: 1148:      for (i = 0; i < state->numPlayers; i++)
        -: 1149:	{
    #####: 1150:	  if (i != currentPlayer)
        -: 1151:	    {
    #####: 1152:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1153:		{
    #####: 1154:		  if (state->hand[i][j] == copper)
        -: 1155:		    {
    #####: 1156:		      discardCard(j, i, state, 0);
    #####: 1157:		      break;
        -: 1158:		    }
    #####: 1159:		  if (j == state->handCount[i])
        -: 1160:		    {
    #####: 1161:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1162:			{
        -: 1163:			  if (DEBUG)
        -: 1164:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1165:			}	
    #####: 1166:		      break;
        -: 1167:		    }		
        -: 1168:		}
        -: 1169:					
        -: 1170:	    }
        -: 1171:				
        -: 1172:	}				
        -: 1173:
        -: 1174:      //discard played card from hand
    #####: 1175:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1176:
    #####: 1177:      return 0;
        -: 1178:
        -: 1179:		
        -: 1180:    case embargo: 
        -: 1181:      //+2 Coins
    #####: 1182:      state->coins = state->coins + 2;
        -: 1183:			
        -: 1184:      //see if selected pile is in play
    #####: 1185:      if ( state->supplyCount[choice1] == -1 )
        -: 1186:	{
    #####: 1187:	  return -1;
        -: 1188:	}
        -: 1189:			
        -: 1190:      //add embargo token to selected supply pile
    #####: 1191:      state->embargoTokens[choice1]++;
        -: 1192:			
        -: 1193:      //trash card
    #####: 1194:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1195:      return 0;
        -: 1196:		
        -: 1197:    case outpost:
        -: 1198:      //set outpost flag
    #####: 1199:      state->outpostPlayed++;
        -: 1200:			
        -: 1201:      //discard card
    #####: 1202:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1203:      return 0;
        -: 1204:		
        -: 1205:    case salvager:
        -: 1206:      //+1 buy
    #####: 1207:      state->numBuys++;
        -: 1208:			
    #####: 1209:      if (choice1)
        -: 1210:	{
        -: 1211:	  //gain coins equal to trashed card
    #####: 1212:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1213:	  //trash card
    #####: 1214:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1215:	}
        -: 1216:			
        -: 1217:      //discard card
    #####: 1218:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1219:      return 0;
        -: 1220:		
        -: 1221:    case sea_hag:
    #####: 1222:      for (i = 0; i < state->numPlayers; i++){
    #####: 1223:	if (i != currentPlayer){
    #####: 1224:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1225:	  state->discardCount[i]++;
    #####: 1226:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1227:	}
        -: 1228:      }
    #####: 1229:      return 0;
        -: 1230:		
        -: 1231:    case treasure_map:
        -: 1232:      //search hand for another treasure_map
    #####: 1233:      index = -1;
    #####: 1234:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1235:	{
    #####: 1236:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1237:	    {
    #####: 1238:	      index = i;
    #####: 1239:	      break;
        -: 1240:	    }
        -: 1241:	}
    #####: 1242:      if (index > -1)
        -: 1243:	{
        -: 1244:	  //trash both treasure cards
    #####: 1245:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1246:	  discardCard(index, currentPlayer, state, 1);
        -: 1247:
        -: 1248:	  //gain 4 Gold cards
    #####: 1249:	  for (i = 0; i < 4; i++)
        -: 1250:	    {
    #####: 1251:	      gainCard(gold, state, 1, currentPlayer);
        -: 1252:	    }
        -: 1253:				
        -: 1254:	  //return success
    #####: 1255:	  return 1;
        -: 1256:	}
        -: 1257:			
        -: 1258:      //no second treasure_map found in hand
    #####: 1259:      return -1;
        -: 1260:    }
        -: 1261:	
    #####: 1262:  return -1;
        -: 1263:}
        -: 1264:
        8: 1265:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1266:{
        -: 1267:	
        -: 1268:  //if card is not trashed, added to Played pile 
        8: 1269:  if (trashFlag < 1)
        -: 1270:    {
        -: 1271:      //add card to played pile
        8: 1272:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        8: 1273:      state->playedCardCount++;
        -: 1274:    }
        -: 1275:	
        -: 1276:  //set played card to -1
        8: 1277:  state->hand[currentPlayer][handPos] = -1;
        -: 1278:	
        -: 1279:  //remove card from player's hand
        8: 1280:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1281:    {
        -: 1282:      //reduce number of cards in hand
    #####: 1283:      state->handCount[currentPlayer]--;
        -: 1284:    }
        8: 1285:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1286:    {
        -: 1287:      //reduce number of cards in hand
    #####: 1288:      state->handCount[currentPlayer]--;
        -: 1289:    }
        -: 1290:  else 	
        -: 1291:    {
        -: 1292:      //replace discarded card with last card in hand
        8: 1293:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1294:      //set last card to -1
        8: 1295:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1296:      //reduce number of cards in hand
        8: 1297:      state->handCount[currentPlayer]--;
        -: 1298:    }
        -: 1299:	
        8: 1300:  return 0;
        -: 1301:}
        -: 1302:
        4: 1303:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1304:{
        -: 1305:  //Note: supplyPos is enum of choosen card
        -: 1306:	
        -: 1307:  //check if supply pile is empty (0) or card is not used in game (-1)
        4: 1308:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1309:    {
    #####: 1310:      return -1;
        -: 1311:    }
        -: 1312:	
        -: 1313:  //added card for [whoseTurn] current player:
        -: 1314:  // toFlag = 0 : add to discard
        -: 1315:  // toFlag = 1 : add to deck
        -: 1316:  // toFlag = 2 : add to hand
        -: 1317:
        4: 1318:  if (toFlag == 1)
        -: 1319:    {
    #####: 1320:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1321:      state->deckCount[player]++;
        -: 1322:    }
        4: 1323:  else if (toFlag == 2)
        -: 1324:    {
    #####: 1325:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1326:      state->handCount[player]++;
        -: 1327:    }
        -: 1328:  else
        -: 1329:    {
        4: 1330:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        4: 1331:      state->discardCount[player]++;
        -: 1332:    }
        -: 1333:	
        -: 1334:  //decrease number in supply pile
        4: 1335:  state->supplyCount[supplyPos]--;
        -: 1336:	 
        4: 1337:  return 0;
        -: 1338:}
        -: 1339:
       40: 1340:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1341:{
        -: 1342:  int i;
        -: 1343:	
        -: 1344:  //reset coin count
       40: 1345:  state->coins = 0;
        -: 1346:
        -: 1347:  //add coins for each Treasure card in player's hand
      236: 1348:  for (i = 0; i < state->handCount[player]; i++)
        -: 1349:    {
      196: 1350:      if (state->hand[player][i] == copper)
        -: 1351:	{
      108: 1352:	  state->coins += 1;
        -: 1353:	}
       88: 1354:      else if (state->hand[player][i] == silver)
        -: 1355:	{
       12: 1356:	  state->coins += 2;
        -: 1357:	}
       76: 1358:      else if (state->hand[player][i] == gold)
        -: 1359:	{
        6: 1360:	  state->coins += 3;
        -: 1361:	}	
        -: 1362:    }	
        -: 1363:
        -: 1364:  //add bonus
       40: 1365:  state->coins += bonus;
        -: 1366:
       40: 1367:  return 0;
        -: 1368:}
        -: 1369:
        -: 1370:
        -: 1371://end of dominion.c
        -: 1372:
