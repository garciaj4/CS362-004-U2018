TESTING: council_room:
FAILED:Test to see if our actions was reduced by 1
Expected: 2017404748     Received: 2017404749
FAILED:Test to see if our actions was reduced by 1
Expected: -607131707     Received: -607131706
FAILED:Test to see if our actions was reduced by 1
Expected: 1022759430     Received: 1022759431
FAILED:Test to see if our actions was reduced by 1
Expected: 1676345442     Received: 1676345443
FAILED:Test to see if our actions was reduced by 1
Expected: -2058636543     Received: -2058636542
FAILED:Test to see if our actions was reduced by 1
Expected: -375216041     Received: -375216040
FAILED:Test to see if our actions was reduced by 1
Expected: -1531856922     Received: -1531856921
FAILED:Test to see if our actions was reduced by 1
Expected: -1070911909     Received: -1070911908
FAILED:Test to see if our actions was reduced by 1
Expected: 461658467     Received: 461658468
FAILED:Test to see if our actions was reduced by 1
Expected: -590092352     Received: -590092351
FAILED:Test to see if our actions was reduced by 1
Expected: 1990375860     Received: 1990375861
FAILED:Test to see if our actions was reduced by 1
Expected: 660523764     Received: 660523765
FAILED:Test to see if our actions was reduced by 1
Expected: -1588854612     Received: -1588854611
FAILED:Test to see if our actions was reduced by 1
Expected: -494138611     Received: -494138610
FAILED:Test to see if our actions was reduced by 1
Expected: -325033101     Received: -325033100
FAILED:Test to see if our actions was reduced by 1
Expected: 284476496     Received: 284476497
FAILED:Test to see if our actions was reduced by 1
Expected: 1373731250     Received: 1373731251
FAILED:Test to see if our actions was reduced by 1
Expected: -1862539120     Received: -1862539119
FAILED:Test to see if our actions was reduced by 1
Expected: -1804037310     Received: -1804037309
FAILED:Test to see if our actions was reduced by 1
Expected: -1100513253     Received: -1100513252
FAILED:Test to see if our actions was reduced by 1
Expected: -288684422     Received: -288684421
FAILED:Test to see if our actions was reduced by 1
Expected: -345811656     Received: -345811655
FAILED:Test to see if our actions was reduced by 1
Expected: -1211357156     Received: -1211357155
FAILED:Test to see if our actions was reduced by 1
Expected: 998805388     Received: 998805389
FAILED:Test to see if our actions was reduced by 1
Expected: -2133781904     Received: -2133781903
FAILED:Test to see if our actions was reduced by 1
Expected: 2114999579     Received: 2114999580
FAILED:Test to see if our actions was reduced by 1
Expected: -197914508     Received: -197914507
FAILED:Test to see if our actions was reduced by 1
Expected: 1266785061     Received: 1266785062
FAILED:Test to see if our actions was reduced by 1
Expected: -1461851930     Received: -1461851929
FAILED:Test to see if our actions was reduced by 1
Expected: 1798395949     Received: 1798395950
FAILED:Test to see if our actions was reduced by 1
Expected: 993164899     Received: 993164900
FAILED:Test to see if our actions was reduced by 1
Expected: -1261773085     Received: -1261773084
FAILED:Test to see if our actions was reduced by 1
Expected: -2025935789     Received: -2025935788
FAILED:Test to see if our actions was reduced by 1
Expected: -1609748779     Received: -1609748778
FAILED:Test to see if our actions was reduced by 1
Expected: -174119341     Received: -174119340
FAILED:Test to see if our actions was reduced by 1
Expected: -838220963     Received: -838220962
FAILED:Test to see if our actions was reduced by 1
Expected: 1456368545     Received: 1456368546
FAILED:Test to see if our actions was reduced by 1
Expected: 951680799     Received: 951680800
FAILED:Test to see if our actions was reduced by 1
Expected: -1679655009     Received: -1679655008
FAILED:Test to see if our actions was reduced by 1
Expected: -680155858     Received: -680155857
FAILED:Test to see if our actions was reduced by 1
Expected: 678965022     Received: 678965023
FAILED:Test to see if our actions was reduced by 1
Expected: 2035955797     Received: 2035955798
FAILED:Test to see if our actions was reduced by 1
Expected: 902856329     Received: 902856330
FAILED:Test to see if our actions was reduced by 1
Expected: 1550503804     Received: 1550503805
FAILED:Test to see if our actions was reduced by 1
Expected: -622603697     Received: -622603696
FAILED:Test to see if our actions was reduced by 1
Expected: -1339842607     Received: -1339842606
FAILED:Test to see if our actions was reduced by 1
Expected: 1681838406     Received: 1681838407
FAILED:Test to see if our actions was reduced by 1
Expected: -583597663     Received: -583597662
FAILED:Test to see if our actions was reduced by 1
Expected: 1429198391     Received: 1429198392
FAILED:Test to see if our actions was reduced by 1
Expected: -167394781     Received: -167394780
FAILED:Test to see if our actions was reduced by 1
Expected: -1903807250     Received: -1903807249
FAILED:Test to see if our actions was reduced by 1
Expected: -1928727047     Received: -1928727046
FAILED:Test to see if our actions was reduced by 1
Expected: 1758361256     Received: 1758361257
FAILED:Test to see if our actions was reduced by 1
Expected: -438229206     Received: -438229205
FAILED:Test to see if our actions was reduced by 1
Expected: 1176557475     Received: 1176557476
FAILED:Test to see if our actions was reduced by 1
Expected: 1725238187     Received: 1725238188
FAILED:Test to see if our actions was reduced by 1
Expected: 963544172     Received: 963544173
FAILED:Test to see if our actions was reduced by 1
Expected: -1580537852     Received: -1580537851
FAILED:Test to see if our actions was reduced by 1
Expected: -777459299     Received: -777459298
FAILED:Test to see if our actions was reduced by 1
Expected: -95720820     Received: -95720819
FAILED:Test to see if our actions was reduced by 1
Expected: -2039105987     Received: -2039105986
FAILED:Test to see if our actions was reduced by 1
Expected: -500588323     Received: -500588322
FAILED:Test to see if our actions was reduced by 1
Expected: -1796985488     Received: -1796985487
FAILED:Test to see if our actions was reduced by 1
Expected: 1867181894     Received: 1867181895
FAILED:Test to see if our actions was reduced by 1
Expected: 1862540360     Received: 1862540361
FAILED:Test to see if our actions was reduced by 1
Expected: -1104570211     Received: -1104570210
FAILED:Test to see if our actions was reduced by 1
Expected: 313048685     Received: 313048686
FAILED:Test to see if our actions was reduced by 1
Expected: -766354758     Received: -766354757
FAILED:Test to see if our actions was reduced by 1
Expected: -1615964963     Received: -1615964962
FAILED:Test to see if our actions was reduced by 1
Expected: -1298615     Received: -1298614
FAILED:Test to see if our actions was reduced by 1
Expected: -1631639010     Received: -1631639009
FAILED:Test to see if our actions was reduced by 1
Expected: -288913743     Received: -288913742
FAILED:Test to see if our actions was reduced by 1
Expected: -374563508     Received: -374563507
FAILED:Test to see if our actions was reduced by 1
Expected: -1004236593     Received: -1004236592
FAILED:Test to see if our actions was reduced by 1
Expected: -1519752941     Received: -1519752940
FAILED:Test to see if our actions was reduced by 1
Expected: -1313074561     Received: -1313074560
FAILED:Test to see if our actions was reduced by 1
Expected: 1038342284     Received: 1038342285
FAILED:Test to see if our actions was reduced by 1
Expected: 590647530     Received: 590647531
FAILED:Test to see if our actions was reduced by 1
Expected: 1113909765     Received: 1113909766
FAILED:Test to see if our actions was reduced by 1
Expected: 1481222503     Received: 1481222504
FAILED:Test to see if our actions was reduced by 1
Expected: 1178640979     Received: 1178640980
FAILED:Test to see if our actions was reduced by 1
Expected: 1200251592     Received: 1200251593
FAILED:Test to see if our actions was reduced by 1
Expected: -648895906     Received: -648895905
FAILED:Test to see if our actions was reduced by 1
Expected: -1606208600     Received: -1606208599
FAILED:Test to see if our actions was reduced by 1
Expected: 231567210     Received: 231567211
FAILED:Test to see if our actions was reduced by 1
Expected: -338434292     Received: -338434291
FAILED:Test to see if our actions was reduced by 1
Expected: 707614809     Received: 707614810
FAILED:Test to see if our actions was reduced by 1
Expected: -1281489445     Received: -1281489444
FAILED:Test to see if our actions was reduced by 1
Expected: -130961539     Received: -130961538
FAILED:Test to see if our actions was reduced by 1
Expected: -1948404915     Received: -1948404914
FAILED:Test to see if our actions was reduced by 1
Expected: -1330384412     Received: -1330384411
FAILED:Test to see if our actions was reduced by 1
Expected: -1691999665     Received: -1691999664
FAILED:Test to see if our actions was reduced by 1
Expected: 1668879223     Received: 1668879224
FAILED:Test to see if our actions was reduced by 1
Expected: -908336430     Received: -908336429
FAILED:Test to see if our actions was reduced by 1
Expected: 1139584111     Received: 1139584112
FAILED:Test to see if our actions was reduced by 1
Expected: 149005097     Received: 149005098
FAILED:Test to see if our actions was reduced by 1
Expected: 1696226098     Received: 1696226099
FAILED:Test to see if our actions was reduced by 1
Expected: 1830027843     Received: 1830027844
FAILED:Test to see if our actions was reduced by 1
Expected: -1437916571     Received: -1437916570
FAILED:Test to see if our actions was reduced by 1
Expected: 1230133579     Received: 1230133580

File 'dominion.c'
Lines executed:17.79% of 562
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:4
        -:    0:Programs:4
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
     3648:    8:int compare(const void* a, const void* b) {
     3648:    9:  if (*(int*)a > *(int*)b)
     1883:   10:    return 1;
     1765:   11:  if (*(int*)a < *(int*)b)
     1765:   12:    return -1;
    #####:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
    #####:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
    #####:   44:  SelectStream(1);
    #####:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
    #####:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
    #####:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
    #####:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
    #####:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
    #####:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
    #####:   73:  if (numPlayers == 2)
        -:   74:    {
    #####:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
    #####:   87:  if (numPlayers == 2)
        -:   88:    {
    #####:   89:      state->supplyCount[estate] = 8;
    #####:   90:      state->supplyCount[duchy] = 8;
    #####:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
    #####:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
    #####:  102:  state->supplyCount[silver] = 40;
    #####:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
    #####:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
    #####:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
    #####:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
    #####:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
    #####:  115:		  if (numPlayers == 2){ 
    #####:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
    #####:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
    #####:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
    #####:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
    #####:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
    #####:  140:      state->deckCount[i] = 0;
    #####:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
    #####:  143:	  state->deck[i][j] = estate;
    #####:  144:	  state->deckCount[i]++;
        -:  145:	}
    #####:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
    #####:  148:	  state->deck[i][j] = copper;
    #####:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
    #####:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
    #####:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
    #####:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
    #####:  166:      state->handCount[i] = 0;
    #####:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
    #####:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
    #####:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
    #####:  182:  state->outpostPlayed = 0;
    #####:  183:  state->phase = 0;
    #####:  184:  state->numActions = 1;
    #####:  185:  state->numBuys = 1;
    #####:  186:  state->playedCardCount = 0;
    #####:  187:  state->whoseTurn = 0;
    #####:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
    #####:  192:  for (it = 0; it < 5; it++){
    #####:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
    #####:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
    #####:  198:  return 0;
        -:  199:}
        -:  200:
        4:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
        4:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
        4:  209:  if (state->deckCount[player] < 1)
        3:  210:    return -1;
        1:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      477:  214:  while (state->deckCount[player] > 0) {
      475:  215:    card = floor(Random() * state->deckCount[player]);
      475:  216:    newDeck[newDeckPos] = state->deck[player][card];
      475:  217:    newDeckPos++;
    56477:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
    56002:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      475:  221:    state->deckCount[player]--;
        -:  222:  }
      476:  223:  for (i = 0; i < newDeckPos; i++) {
      475:  224:    state->deck[player][i] = newDeck[i];
      475:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
        1:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
      400:  346:int whoseTurn(struct gameState *state) {
      400:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
    28242:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
    28242:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
      477:  533:    for (i = 0; i < state->discardCount[player];i++){
      475:  534:      state->deck[player][i] = state->discard[player][i];
      475:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
        2:  538:    state->deckCount[player] = state->discardCount[player];
        2:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
        2:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
        2:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
        2:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
        2:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
        2:  559:    if (deckCounter == 0)
        1:  560:      return -1;
        -:  561:
        1:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        1:  563:    state->deckCount[player]--;
        1:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
    28240:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
    28240:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
    28240:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    28240:  576:    state->deckCount[player]--;
    28240:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
    28241:  580:  return 0;
        -:  581:}
        -:  582:
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
      100:  646:int adventurer_effect(struct gameState *state, int currentPlayer){
        -:  647:      int cardDrawn;
      100:  648:      int drawntreasure = 0;
      100:  649:      int z = 0;
        -:  650:      int temphand[MAX_HAND];
        -:  651:
    26742:  652:      while(drawntreasure<2){
    26542:  653:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        2:  654:	  shuffle(currentPlayer, state);
        -:  655:	}
    26542:  656:	drawCard(currentPlayer, state);
    26542:  657:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    26542:  658:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
      200:  659:	  drawntreasure++;
        -:  660:	else{
    26342:  661:	  temphand[z]=cardDrawn;
    26342:  662:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    26342:  663:	  z++;
        -:  664:	}
        -:  665:      }
    26542:  666:      while(z-1>=0){
    26342:  667:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    26342:  668:	z=z-1;
        -:  669:      }
      100:  670:      return 0;
        -:  671:}
        -:  672:
      100:  673:int smithy_effect(struct gameState *state, int currentPlayer,int handPos){
        -:  674:      int i;
        -:  675:      //+3 Cards
      400:  676:      for (i = 0; i < 3; i++)
        -:  677:	{
      300:  678:	  drawCard(currentPlayer, state);
        -:  679:	}
        -:  680:			
        -:  681:      //discard card from hand
      100:  682:      discardCard(handPos, currentPlayer, state, 1);
      100:  683:      return 0;
        -:  684:}
        -:  685:
    #####:  686:int outpost_effect(struct gameState *state, int currentPlayer, int handPos){			
        -:  687:      //discard card
    #####:  688:      discardCard(handPos, currentPlayer, state, 0);
    #####:  689:      return 0;
        -:  690:}
        -:  691:
    #####:  692:int ambassador_effect(int choice1, int choice2, struct gameState *state, int currentPlayer, int handPos){
        -:  693:      int j;		//used to check if player has enough cards to discard
        -:  694:      int i;
        -:  695:
    #####:  696:      j = 0;
        -:  697:
    #####:  698:      if (choice2 > 2 || choice2 < 1)
        -:  699:	{
    #####:  700:	  return -1;				
        -:  701:	}
        -:  702:
    #####:  703:      if (choice1 == handPos)
        -:  704:	{
    #####:  705:	  return -1;
        -:  706:	}
        -:  707:
    #####:  708:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  709:	{
    #####:  710:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -:  711:	    {
    #####:  712:	      j++;
        -:  713:	    }
        -:  714:	}
    #####:  715:      if (j < choice2)
        -:  716:	{
    #####:  717:	  return -1;				
        -:  718:	}
        -:  719:
        -:  720:      if (DEBUG) 
        -:  721:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  722:
        -:  723:      //increase supply count for choosen card by amount being discarded
    #####:  724:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  725:			
        -:  726:      //each other player gains a copy of revealed card
    #####:  727:      for (i = 0; i < state->numPlayers; i++)
        -:  728:	{
    #####:  729:	  if (i != currentPlayer)
        -:  730:	    {
    #####:  731:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -:  732:	    }
        -:  733:	}
        -:  734:
        -:  735:      //discard played card from hand
    #####:  736:      discardCard(handPos, currentPlayer, state, 0);			
        -:  737:
        -:  738:      //trash copies of cards returned to supply
    #####:  739:      for (j = 0; j < choice2; j++)
        -:  740:	{
    #####:  741:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  742:	    {
    #####:  743:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -:  744:		{
    #####:  745:		  discardCard(i, currentPlayer, state, 1);
    #####:  746:		  break;
        -:  747:		}
        -:  748:	    }
        -:  749:	}			
        -:  750:
    #####:  751:      return 0;
        -:  752:}
        -:  753:
      200:  754:int council_room_effect(struct gameState *state, int currentPlayer, int handPos){
        -:  755:
        -:  756:    
        -:  757:    int i;
        -:  758:    //+4 Cards
     1000:  759:    for (i = 0; i < 4; i++)
        -:  760:  	{
      800:  761:  	   drawCard(currentPlayer, state);
        -:  762:  	}
        -:  763:			
        -:  764:      //+1 Buy
      200:  765:      state->numBuys++;
        -:  766:
        -:  767:      //Each other player draws a card
     1000:  768:      for (i = 0; i < state->numPlayers; i++)
        -:  769:	{
      800:  770:	  if ( i != currentPlayer )
        -:  771:	    {
      600:  772:	      drawCard(i, state);
        -:  773:	    }
        -:  774:	}
        -:  775:			
        -:  776:      //put played card in played card pile
      200:  777:      discardCard(handPos, currentPlayer, state, 0);
        -:  778:
      200:  779:      return 0;
        -:  780:}
        -:  781:
        -:  782:
        -:  783:
      400:  784:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  785:{
        -:  786:  int i;
        -:  787:  int j;
        -:  788:  int k;
        -:  789:  int x;
        -:  790:  int index;
      400:  791:  int currentPlayer = whoseTurn(state);
      400:  792:  int nextPlayer = currentPlayer + 1;
        -:  793:
      400:  794:  int tributeRevealedCards[2] = {-1, -1};
        -:  795:  int temphand[MAX_HAND];// moved above the if statement
      400:  796:  if (nextPlayer > (state->numPlayers - 1)){
      168:  797:    nextPlayer = 0;
        -:  798:  }
        -:  799:  
        -:  800:	
        -:  801:  //uses switch to select card and perform actions
      400:  802:  switch( card ) 
        -:  803:    {
        -:  804:    case adventurer:
      100:  805:      adventurer_effect(state, currentPlayer);      
      100:  806:      return 0;
        -:  807:			
        -:  808:    case council_room:
      200:  809:      council_room_effect(state, currentPlayer, handPos);		
      200:  810:      return 0;
        -:  811:			
        -:  812:    case feast:
        -:  813:      //gain card with cost up to 5
        -:  814:      //Backup hand
    #####:  815:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  816:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  817:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  818:      }
        -:  819:      //Backup hand
        -:  820:
        -:  821:      //Update Coins for Buy
    #####:  822:      updateCoins(currentPlayer, state, 5);
    #####:  823:      x = 1;//Condition to loop on
    #####:  824:      while( x == 1) {//Buy one card
    #####:  825:	if (supplyCount(choice1, state) <= 0){
        -:  826:	  if (DEBUG)
        -:  827:	    printf("None of that card left, sorry!\n");
        -:  828:
        -:  829:	  if (DEBUG){
        -:  830:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  831:	  }
        -:  832:	}
    #####:  833:	else if (state->coins < getCost(choice1)){
    #####:  834:	  printf("That card is too expensive!\n");
        -:  835:
        -:  836:	  if (DEBUG){
        -:  837:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  838:	  }
        -:  839:	}
        -:  840:	else{
        -:  841:
        -:  842:	  if (DEBUG){
        -:  843:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  844:	  }
        -:  845:
    #####:  846:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  847:	  x = 0;//No more buying cards
        -:  848:
        -:  849:	  if (DEBUG){
        -:  850:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  851:	  }
        -:  852:
        -:  853:	}
        -:  854:      }     
        -:  855:
        -:  856:      //Reset Hand
    #####:  857:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  858:	state->hand[currentPlayer][i] = temphand[i];
    #####:  859:	temphand[i] = -1;
        -:  860:      }
        -:  861:      //Reset Hand
        -:  862:      			
    #####:  863:      return 0;
        -:  864:			
        -:  865:    case gardens:
    #####:  866:      return -1;
        -:  867:			
        -:  868:    case mine:
    #####:  869:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  870:
    #####:  871:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  872:	{
    #####:  873:	  return -1;
        -:  874:	}
        -:  875:		
    #####:  876:      if (choice2 > treasure_map || choice2 < curse)
        -:  877:	{
    #####:  878:	  return -1;
        -:  879:	}
        -:  880:
    #####:  881:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  882:	{
    #####:  883:	  return -1;
        -:  884:	}
        -:  885:
    #####:  886:      gainCard(choice2, state, 2, currentPlayer);
        -:  887:
        -:  888:      //discard card from hand
    #####:  889:      discardCard(handPos, currentPlayer, state, 0);
        -:  890:
        -:  891:      //discard trashed card
    #####:  892:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  893:	{
    #####:  894:	  if (state->hand[currentPlayer][i] == j)
        -:  895:	    {
    #####:  896:	      discardCard(i, currentPlayer, state, 0);			
    #####:  897:	      break;
        -:  898:	    }
        -:  899:	}
        -:  900:			
    #####:  901:      return 0;
        -:  902:			
        -:  903:    case remodel:
    #####:  904:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  905:
    #####:  906:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  907:	{
    #####:  908:	  return -1;
        -:  909:	}
        -:  910:
    #####:  911:      gainCard(choice2, state, 0, currentPlayer);
        -:  912:
        -:  913:      //discard card from hand
    #####:  914:      discardCard(handPos, currentPlayer, state, 0);
        -:  915:
        -:  916:      //discard trashed card
    #####:  917:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  918:	{
    #####:  919:	  if (state->hand[currentPlayer][i] == j)
        -:  920:	    {
    #####:  921:	      discardCard(i, currentPlayer, state, 0);			
    #####:  922:	      break;
        -:  923:	    }
        -:  924:	}
        -:  925:
        -:  926:
    #####:  927:      return 0;
        -:  928:		
        -:  929:    case smithy:
      100:  930:      smithy_effect(state, currentPlayer, handPos);
      100:  931:      return 0;
        -:  932:		
        -:  933:    case village:
        -:  934:      //+1 Card
    #####:  935:      drawCard(currentPlayer, state);
        -:  936:			
        -:  937:      //+2 Actions
    #####:  938:      state->numActions = state->numActions + 2;
        -:  939:			
        -:  940:      //discard played card from hand
    #####:  941:      discardCard(handPos, currentPlayer, state, 0);
    #####:  942:      return 0;
        -:  943:		
        -:  944:    case baron:
    #####:  945:      state->numBuys++;//Increase buys by 1!
    #####:  946:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  947:	int p = 0;//Iterator for hand!
    #####:  948:	int card_not_discarded = 1;//Flag for discard set!
    #####:  949:	while(card_not_discarded){
    #####:  950:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  951:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  952:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  953:	    state->discardCount[currentPlayer]++;
    #####:  954:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  955:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  956:	    }
    #####:  957:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  958:	    state->handCount[currentPlayer]--;
    #####:  959:	    card_not_discarded = 0;//Exit the loop
        -:  960:	  }
    #####:  961:	  else if (p > state->handCount[currentPlayer]){
        -:  962:	    if(DEBUG) {
        -:  963:	      printf("No estate cards in your hand, invalid choice\n");
        -:  964:	      printf("Must gain an estate if there are any\n");
        -:  965:	    }
    #####:  966:	    if (supplyCount(estate, state) > 0){
    #####:  967:	      gainCard(estate, state, 0, currentPlayer);
    #####:  968:	      state->supplyCount[estate]--;//Decrement estates
    #####:  969:	      if (supplyCount(estate, state) == 0){
    #####:  970:		isGameOver(state);
        -:  971:	      }
        -:  972:	    }
    #####:  973:	    card_not_discarded = 0;//Exit the loop
        -:  974:	  }
        -:  975:			    
        -:  976:	  else{
    #####:  977:	    p++;//Next card
        -:  978:	  }
        -:  979:	}
        -:  980:      }
        -:  981:			    
        -:  982:      else{
    #####:  983:	if (supplyCount(estate, state) > 0){
    #####:  984:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  985:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  986:	  if (supplyCount(estate, state) == 0){
    #####:  987:	    isGameOver(state);
        -:  988:	  }
        -:  989:	}
        -:  990:      }
        -:  991:	    
        -:  992:      
    #####:  993:      return 0;
        -:  994:		
        -:  995:    case great_hall:
        -:  996:      //+1 Card
    #####:  997:      drawCard(currentPlayer, state);
        -:  998:			
        -:  999:      //+1 Actions
    #####: 1000:      state->numActions++;
        -: 1001:			
        -: 1002:      //discard card from hand
    #####: 1003:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1004:      return 0;
        -: 1005:		
        -: 1006:    case minion:
        -: 1007:      //+1 action
    #####: 1008:      state->numActions++;
        -: 1009:			
        -: 1010:      //discard card from hand
    #####: 1011:      discardCard(handPos, currentPlayer, state, 0);
        -: 1012:			
    #####: 1013:      if (choice1)		//+2 coins
        -: 1014:	{
    #####: 1015:	  state->coins = state->coins + 2;
        -: 1016:	}
        -: 1017:			
    #####: 1018:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1019:	{
        -: 1020:	  //discard hand
    #####: 1021:	  while(numHandCards(state) > 0)
        -: 1022:	    {
    #####: 1023:	      discardCard(handPos, currentPlayer, state, 0);
        -: 1024:	    }
        -: 1025:				
        -: 1026:	  //draw 4
    #####: 1027:	  for (i = 0; i < 4; i++)
        -: 1028:	    {
    #####: 1029:	      drawCard(currentPlayer, state);
        -: 1030:	    }
        -: 1031:				
        -: 1032:	  //other players discard hand and redraw if hand size > 4
    #####: 1033:	  for (i = 0; i < state->numPlayers; i++)
        -: 1034:	    {
    #####: 1035:	      if (i != currentPlayer)
        -: 1036:		{
    #####: 1037:		  if ( state->handCount[i] > 4 )
        -: 1038:		    {
        -: 1039:		      //discard hand
    #####: 1040:		      while( state->handCount[i] > 0 )
        -: 1041:			{
    #####: 1042:			  discardCard(handPos, i, state, 0);
        -: 1043:			}
        -: 1044:							
        -: 1045:		      //draw 4
    #####: 1046:		      for (j = 0; j < 4; j++)
        -: 1047:			{
    #####: 1048:			  drawCard(i, state);
        -: 1049:			}
        -: 1050:		    }
        -: 1051:		}
        -: 1052:	    }
        -: 1053:				
        -: 1054:	}
    #####: 1055:      return 0;
        -: 1056:		
        -: 1057:    case steward:
    #####: 1058:      if (choice1 == 1)
        -: 1059:	{
        -: 1060:	  //+2 cards
    #####: 1061:	  drawCard(currentPlayer, state);
    #####: 1062:	  drawCard(currentPlayer, state);
        -: 1063:	}
    #####: 1064:      else if (choice1 == 2)
        -: 1065:	{
        -: 1066:	  //+2 coins
    #####: 1067:	  state->coins = state->coins + 2;
        -: 1068:	}
        -: 1069:      else
        -: 1070:	{
        -: 1071:	  //trash 2 cards in hand
    #####: 1072:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1073:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1074:	}
        -: 1075:			
        -: 1076:      //discard card from hand
    #####: 1077:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1078:      return 0;
        -: 1079:		
        -: 1080:    case tribute:
    #####: 1081:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1082:	if (state->deckCount[nextPlayer] > 0){
    #####: 1083:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1084:	  state->deckCount[nextPlayer]--;
        -: 1085:	}
    #####: 1086:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1087:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1088:	  state->discardCount[nextPlayer]--;
        -: 1089:	}
        -: 1090:	else{
        -: 1091:	  //No Card to Reveal
        -: 1092:	  if (DEBUG){
        -: 1093:	    printf("No cards to reveal\n");
        -: 1094:	  }
        -: 1095:	}
        -: 1096:      }
        -: 1097:	    
        -: 1098:      else{
    #####: 1099:	if (state->deckCount[nextPlayer] == 0){
    #####: 1100:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1101:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1102:	    state->deckCount[nextPlayer]++;
    #####: 1103:	    state->discard[nextPlayer][i] = -1;
    #####: 1104:	    state->discardCount[nextPlayer]--;
        -: 1105:	  }
        -: 1106:			    
    #####: 1107:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1108:	} 
    #####: 1109:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1110:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1111:	state->deckCount[nextPlayer]--;
    #####: 1112:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1113:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1114:	state->deckCount[nextPlayer]--;
        -: 1115:      }    
        -: 1116:		       
    #####: 1117:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1118:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1119:	state->playedCardCount++;
    #####: 1120:	tributeRevealedCards[1] = -1;
        -: 1121:      }
        -: 1122:
    #####: 1123:      for (i = 0; i <= 2; i ++){
    #####: 1124:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1125:	  state->coins += 2;
        -: 1126:	}
        -: 1127:		    
    #####: 1128:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1129:	  drawCard(currentPlayer, state);
    #####: 1130:	  drawCard(currentPlayer, state);
        -: 1131:	}
        -: 1132:	else{//Action Card
    #####: 1133:	  state->numActions = state->numActions + 2;
        -: 1134:	}
        -: 1135:      }
        -: 1136:	    
    #####: 1137:      return 0;
        -: 1138:		
        -: 1139:    case ambassador:
    #####: 1140:      ambassador_effect(choice1, choice2, state, currentPlayer, handPos);
    #####: 1141:      return 0;
        -: 1142:		
        -: 1143:    case cutpurse:
        -: 1144:
    #####: 1145:      updateCoins(currentPlayer, state, 2);
    #####: 1146:      for (i = 0; i < state->numPlayers; i++)
        -: 1147:	{
    #####: 1148:	  if (i != currentPlayer)
        -: 1149:	    {
    #####: 1150:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1151:		{
    #####: 1152:		  if (state->hand[i][j] == copper)
        -: 1153:		    {
    #####: 1154:		      discardCard(j, i, state, 0);
    #####: 1155:		      break;
        -: 1156:		    }
    #####: 1157:		  if (j == state->handCount[i])
        -: 1158:		    {
    #####: 1159:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1160:			{
        -: 1161:			  if (DEBUG)
        -: 1162:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1163:			}	
    #####: 1164:		      break;
        -: 1165:		    }		
        -: 1166:		}
        -: 1167:					
        -: 1168:	    }
        -: 1169:				
        -: 1170:	}				
        -: 1171:
        -: 1172:      //discard played card from hand
    #####: 1173:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1174:
    #####: 1175:      return 0;
        -: 1176:
        -: 1177:		
        -: 1178:    case embargo: 
        -: 1179:      //+2 Coins
    #####: 1180:      state->coins = state->coins + 2;
        -: 1181:			
        -: 1182:      //see if selected pile is in play
    #####: 1183:      if ( state->supplyCount[choice1] == -1 )
        -: 1184:	{
    #####: 1185:	  return -1;
        -: 1186:	}
        -: 1187:			
        -: 1188:      //add embargo token to selected supply pile
    #####: 1189:      state->embargoTokens[choice1]++;
        -: 1190:			
        -: 1191:      //trash card
    #####: 1192:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1193:      return 0;
        -: 1194:		
        -: 1195:    case outpost:
    #####: 1196:      outpost_effect(state, currentPlayer, handPos);
    #####: 1197:      return 0;
        -: 1198:		
        -: 1199:    case salvager:
        -: 1200:      //+1 buy
    #####: 1201:      state->numBuys++;
        -: 1202:			
    #####: 1203:      if (choice1)
        -: 1204:	{
        -: 1205:	  //gain coins equal to trashed card
    #####: 1206:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1207:	  //trash card
    #####: 1208:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1209:	}
        -: 1210:			
        -: 1211:      //discard card
    #####: 1212:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1213:      return 0;
        -: 1214:		
        -: 1215:    case sea_hag:
    #####: 1216:      for (i = 0; i < state->numPlayers; i++){
    #####: 1217:	if (i != currentPlayer){
    #####: 1218:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1219:	  state->discardCount[i]++;
    #####: 1220:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1221:	}
        -: 1222:      }
    #####: 1223:      return 0;
        -: 1224:		
        -: 1225:    case treasure_map:
        -: 1226:      //search hand for another treasure_map
    #####: 1227:      index = -1;
    #####: 1228:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1229:	{
    #####: 1230:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1231:	    {
    #####: 1232:	      index = i;
    #####: 1233:	      break;
        -: 1234:	    }
        -: 1235:	}
    #####: 1236:      if (index > -1)
        -: 1237:	{
        -: 1238:	  //trash both treasure cards
    #####: 1239:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1240:	  discardCard(index, currentPlayer, state, 1);
        -: 1241:
        -: 1242:	  //gain 4 Gold cards
    #####: 1243:	  for (i = 0; i < 4; i++)
        -: 1244:	    {
    #####: 1245:	      gainCard(gold, state, 1, currentPlayer);
        -: 1246:	    }
        -: 1247:				
        -: 1248:	  //return success
    #####: 1249:	  return 1;
        -: 1250:	}
        -: 1251:			
        -: 1252:      //no second treasure_map found in hand
    #####: 1253:      return -1;
        -: 1254:    }
        -: 1255:	
    #####: 1256:  return -1;
        -: 1257:}
        -: 1258:
      300: 1259:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1260:{
        -: 1261:	
        -: 1262:  //if card is not trashed, added to Played pile 
      300: 1263:  if (trashFlag < 1)
        -: 1264:    {
        -: 1265:      //add card to played pile
      200: 1266:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
      200: 1267:      state->playedCardCount++;
        -: 1268:    }
        -: 1269:	
        -: 1270:  //set played card to -1
      300: 1271:  state->hand[currentPlayer][handPos] = -1;
        -: 1272:	
        -: 1273:  //remove card from player's hand
      300: 1274:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1275:    {
        -: 1276:      //reduce number of cards in hand
    #####: 1277:      state->handCount[currentPlayer]--;
        -: 1278:    }
      300: 1279:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1280:    {
        -: 1281:      //reduce number of cards in hand
    #####: 1282:      state->handCount[currentPlayer]--;
        -: 1283:    }
        -: 1284:  else 	
        -: 1285:    {
        -: 1286:      //replace discarded card with last card in hand
      300: 1287:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1288:      //set last card to -1
      300: 1289:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1290:      //reduce number of cards in hand
      300: 1291:      state->handCount[currentPlayer]--;
        -: 1292:    }
        -: 1293:	
      300: 1294:  return 0;
        -: 1295:}
        -: 1296:
    #####: 1297:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1298:{
        -: 1299:  //Note: supplyPos is enum of choosen card
        -: 1300:	
        -: 1301:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1302:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1303:    {
    #####: 1304:      return -1;
        -: 1305:    }
        -: 1306:	
        -: 1307:  //added card for [whoseTurn] current player:
        -: 1308:  // toFlag = 0 : add to discard
        -: 1309:  // toFlag = 1 : add to deck
        -: 1310:  // toFlag = 2 : add to hand
        -: 1311:
    #####: 1312:  if (toFlag == 1)
        -: 1313:    {
    #####: 1314:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1315:      state->deckCount[player]++;
        -: 1316:    }
    #####: 1317:  else if (toFlag == 2)
        -: 1318:    {
    #####: 1319:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1320:      state->handCount[player]++;
        -: 1321:    }
        -: 1322:  else
        -: 1323:    {
    #####: 1324:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1325:      state->discardCount[player]++;
        -: 1326:    }
        -: 1327:	
        -: 1328:  //decrease number in supply pile
    #####: 1329:  state->supplyCount[supplyPos]--;
        -: 1330:	 
    #####: 1331:  return 0;
        -: 1332:}
        -: 1333:
    #####: 1334:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1335:{
        -: 1336:  int i;
        -: 1337:	
        -: 1338:  //reset coin count
    #####: 1339:  state->coins = 0;
        -: 1340:
        -: 1341:  //add coins for each Treasure card in player's hand
    #####: 1342:  for (i = 0; i < state->handCount[player]; i++)
        -: 1343:    {
    #####: 1344:      if (state->hand[player][i] == copper)
        -: 1345:	{
    #####: 1346:	  state->coins += 1;
        -: 1347:	}
    #####: 1348:      else if (state->hand[player][i] == silver)
        -: 1349:	{
    #####: 1350:	  state->coins += 2;
        -: 1351:	}
    #####: 1352:      else if (state->hand[player][i] == gold)
        -: 1353:	{
    #####: 1354:	  state->coins += 3;
        -: 1355:	}	
        -: 1356:    }	
        -: 1357:
        -: 1358:  //add bonus
    #####: 1359:  state->coins += bonus;
        -: 1360:
    #####: 1361:  return 0;
        -: 1362:}
        -: 1363:
        -: 1364:
        -: 1365://end of dominion.c
        -: 1366:
